<?php

/**
 * Implements hook_schema().
 */
function commerce_license_billing_schema() {
  $schema['cl_billing_cycle'] = array(
    'description' => 'The base table for the commerce_license_billing_cycle entity type.',
    'fields' => array(
      'billing_cycle_id' => array(
        'description' => 'The primary identifier for a billing cycle.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {cl_billing_cycle_type}.name of this billing cycle.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The {users}.uid that created this billing cycle belongs to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'start' => array(
        'description' => 'The Unix timestamp when the billing cycle starts.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'end' => array(
        'description' => 'The Unix timestamp when the billing cycle ends.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Whether the billing cycle is open or closed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('billing_cycle_id'),
    'indexes' => array(
      'uid' => array('uid'),
    ),
  );
  $schema['cl_billing_cycle_type'] = array(
    'description' => 'The base table for the cl_billing_cycle_type entity type.',
    'fields' => array(
      'billing_cycle_type_id' => array(
        'description' => 'The primary identifier for a billing cycle type.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'engine' => array(
        'description' => 'The engine for this billing cycle type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The machine-readable name of this billing cycle type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The human-readable name of the billing cycle type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'The exportable status of the billing cycle type.',
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the type has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'unique keys' => array(
      'name' => array('name'),
    ),
    'primary key' => array('billing_cycle_type_id'),
  );
  $schema['cl_billing_usage'] = array(
    'description' => 'Tracks license usage.',
    'fields' => array(
      'usage_id' => array(
        'description' => 'The primary key.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'license_id' => array(
        'description' => 'The id of the license.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'revision_id' => array(
        'description' => 'The revision id of the license.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'usage_group' => array(
        'description' => 'The usage group, as defined in $license->usageGroups().',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'quantity' => array(
        'description' => 'The usage quantity.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'start' => array(
        'description' => 'The Unix timestamp when usage began.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'end' => array(
        'description' => 'The Unix timestamp when usage ended.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('usage_id'),
  );
  $schema['cl_scheduled_change'] = array(
    'description' => 'Tracks license changes scheduled for the end of the billing cycle.',
    'fields' => array(
      'change_id' => array(
        'description' => 'The primary key.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'license_id' => array(
        'description' => 'The id of the license.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'property' => array(
        'description' => 'The property that will be changed, usually product_id or status.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'value' => array(
        'description' => 'The new value of the property.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the change was scheduled.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('change_id'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function commerce_license_billing_install() {
  variable_set('bundleswitcher__cl_billing_cycle_type', TRUE);
}

/**
 * Implements hook_uninstall().
 */
function commerce_license_billing_uninstall() {
  variable_del('bundleswitcher__cl_billing_cycle_type');

  // Remove the product fields.
  field_delete_field('cl_billing_cycle_type');
  field_delete_field('cl_billing_type');
  field_delete_field('cl_schedule_changes');

  // Remove our bundles.
  field_attach_delete_bundle('cl_billing_cycle_type', 'periodic');
  field_attach_delete_bundle('commerce_line_item', 'recurring');
  field_attach_delete_bundle('commerce_order', 'recurring');
}

/**
 * Creates the 'cl_scheduled_change' table.
 */
function commerce_license_billing_update_7100() {
  $schema = commerce_license_billing_schema();
  db_create_table('cl_scheduled_change', $schema['cl_scheduled_change']);
}

/**
 * Allow additional billing cycle periods.
 */
function commerce_license_billing_update_7101() {
  $field = field_info_field('pce_period');
  $field['settings'] = array(
    'allowed_values' => array(
      'hour' => 'Hour',
      'day' => 'Day',
      'week' => 'Week',
      'month' => 'Month',
      'quarter' => 'Quarter',
      'half-year' => 'Half-year',
      'year' => 'Year',
    ),
  );
  field_update_field($field);
}
